def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "miti.chat"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 29
        targetSdkVersion 33
        versionCode 312
        versionName "alpha-v1.0.3"

        multiDexEnabled true

        ndk {
            abiFilters "arm64-v8a"//, "armeabi-v7a", "armeabi", "x86", "x86_64", "mips", "mips64"
        }

        lintOptions {
            disable 'InvalidPackage'
            disable "Instantiatable"
            checkReleaseBuilds false
            abortOnError false
        }

        manifestPlaceholders = [
                // 国内
                // GETUI_APPID    : "Bb8eKvZxNg5MYXza0SU1JA",
                // 海外
                GETUI_APP_ID   :  "Bb8eKvZxNg5MYXza0SU1JA",
                GETUI_APP_KEY  : "zmgSnejQKP6eMt58PPq827",
                GETUI_APP_SECRET : "9ehEdFOpS06l06lFkG7g28",

                // 下面是多厂商配置，如需要开通使用请联系技术支持
                // 如果不需要使用，预留空字段即可
                XIAOMI_APP_ID  : "",
                XIAOMI_APP_KEY : "",
                MEIZU_APP_ID   : "152518",
                MEIZU_APP_KEY  : "086865c5faae4e73a83391ad69723882",
                HUAWEI_APP_ID  : "109488479",
                OPPO_APP_KEY   : "",
                OPPO_APP_SECRET: "",
                VIVO_APP_ID    : "",
                VIVO_APP_KEY   : "",
                // 荣耀相关应用参数
                HONOR_APP_ID   : "",
        ]
    }

    signingConfigs {
        release {
            keyAlias 'miti'
            keyPassword 'miti123'
            storeFile file('./miti.keystore')
            storePassword 'miti123'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        profile {
            signingConfig signingConfigs.release

        }
        release {
            minifyEnabled true
            // useProguard true
            shrinkResources true
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = "miti_${versionName}(${versionCode})_${buildType.name}_${buildTime()}.apk"
            }
    }

    packagingOptions {
      // other options here

      /* Fix for ffmpeg-kit-react-native START */
        pickFirst 'lib/arm64-v8a/libgojni.so'
        pickFirst 'lib/armeabi-v7a/libgojni.so'
        pickFirst 'lib/x86/libgojni.so'
        pickFirst 'lib/x86_64/libgojni.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libavcodec.so'
        pickFirst 'lib/arm64-v8a/libavformat.so'
        pickFirst 'lib/arm64-v8a/libavutil.so'
        pickFirst 'lib/arm64-v8a/libswscale.so'
        pickFirst 'lib/arm64-v8a/libavdevice.so'
        pickFirst 'lib/arm64-v8a/libavfilter.so'
        pickFirst 'lib/arm64-v8a/libffmpegkit.so'
        pickFirst 'lib/arm64-v8a/libffmpegkit_abidetect.so'
        pickFirst 'lib/arm64-v8a/libswresample.so'
        pickFirst 'lib/arm64-v8a/libswscale.so'
        pickFirst 'lib/x86/libavcodec.so'
        pickFirst 'lib/x86/libavformat.so'
        pickFirst 'lib/x86/libavutil.so'
        pickFirst 'lib/x86/libswscale.so'
        pickFirst 'lib/x86/libavdevice.so'
        pickFirst 'lib/x86/libavfilter.so'
        pickFirst 'lib/x86/libffmpegkit.so'
        pickFirst 'lib/x86/libffmpegkit_abidetect.so'
        pickFirst 'lib/x86/libswresample.so'
        pickFirst 'lib/x86/libswscale.so'
        pickFirst 'lib/x86_64/libavcodec.so'
        pickFirst 'lib/x86_64/libavformat.so'
        pickFirst 'lib/x86_64/libavutil.so'
        pickFirst 'lib/x86_64/libswscale.so'
        pickFirst 'lib/x86_64/libavdevice.so'
        pickFirst 'lib/x86_64/libavfilter.so'
        pickFirst 'lib/x86_64/libffmpegkit.so'
        pickFirst 'lib/x86_64/libffmpegkit_abidetect.so'
        pickFirst 'lib/x86_64/libswresample.so'
        pickFirst 'lib/x86_64/libswscale.so'
      /* Fix for ffmpeg-kit-react-native END */
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    // 海外
    implementation 'com.getui:sdk-for-gj:4.4.3.6'  //个推SDK

    // 国内
    // implementation 'com.getui:gtsdk:3.3.4.0'  //个推SDK
    // implementation 'com.getui:gtc:3.2.9.0'  //个推核心组件

    // 个推
    // 根据所需厂商选择集成
    implementation 'com.huawei.hms:push:6.11.0.300'
    implementation 'com.getui.opt:hwp:3.1.1'   // 华为
    implementation 'com.getui.opt:xmp:3.2.0'   // 小米
    implementation('com.assist-v3:oppo:3.1.0') {
        exclude group: 'commons-codec'
    }   // oppo
    implementation 'com.assist-v3:vivo:3.1.0'  // vivo
    implementation 'com.getui.opt:mzp:3.2.3'   // 魅族
    implementation 'com.getui.opt:ups:3.0.3'   // ups，ups目前支持坚果，索尼，海信手机
    implementation 'com.getui.opt:honor:3.2.0' // 荣耀

//    implementation('com.amap.api:location:5.6.0')
    implementation 'com.android.support:multidex:1.0.3'
}

apply plugin: 'com.huawei.agconnect'
//apply plugin: 'com.google.gms.google-services'

static def buildTime() {
    return new Date().format("MMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}